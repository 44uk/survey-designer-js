/*
# Mixin
*/

// Clearfix
// --------
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
    line-height: 0;
  }
  &:after {
    clear: both;
  }
}

// Box Shadow
// --------
@mixin box-shadow($value:none) {
  -webkit-box-shadow: $value;
     -moz-box-shadow: $value;
          box-shadow: $value;
}


// Box Sizing
// --------
@mixin box-sizing($value:content-box) {
  -webkit-box-sizing: $value;
     -moz-box-sizing: $value;
          box-sizing: $value;
}

// Text overflow
// --------
@mixin text-clamp($lines: 2, $line-height: false) {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;

  @if $line-height {
    max-height: $line-height * $lines * 1px;
  }
}

// Linear Gradient
// --------
@mixin linear-gradient($top, $bottom){
    background: $bottom;
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $top), color-stop(100%, $bottom));
    background: -webkit-linear-gradient(top, $top 0%, $bottom 100%);
    background: -ms-linear-gradient(top, $top 0%, $bottom 100%);
    background: linear-gradient(to bottom, $top 0%, $bottom 100%);
}


// Transition
// --------
@mixin transition($transition) {
  -webkit-transition: $transition;
     -moz-transition: $transition;
      -ms-transition: $transition;
          transition: $transition;
}


// Transform
// --------
@mixin transform($transform) {
  -webkit-transform: $transform;
     -moz-transform: $transform;
      -ms-transform: $transform;
          transform: $transform;
}

// Image Replacement
// --------
@mixin image-replacement {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;;
}


// px to rem converter
// --------
 // The default font-size is set to 100% of the browser style sheet (usually 16px)
 // for compatibility with browser-based text zoom or user-set defaults.
$base-font-size: 100% !default;

 // $base-line-height is 24px while $base-font-size is 16px
 // $base-line-height: 150%;

 // This is the default html and body font-size for the base rem value.

 // Since the typical default browser font-size is 16px, that makes the calculation for grid size.
 // If you want your base font-size to be a different size and not have it effect grid size too,
 // set the value of $rem-base to $base-font-size ($rem-base: $base-font-size;)
$rem-base: 16px !default;

 // It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

 // Converts "px" to "rem" using the ($)rem-base
@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

 // Working in rems is annoying. Think in pixels by using this handy function, rem-calc(#)
 // Just enter the number, no need to mention "px"
@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values); // Get the total number of parameters passed

  // If there is only 1 parameter, then return it as an integer.
  // This is done because a list can't be multiplied or divided even if it contains a single value
  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: (); // This will eventually store the converted $values in a list
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

 //Retaining this for backward compatability

@function remCalc($pxWidth) {
  @return $pxWidth / $rem-base * 1rem;
}
